# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Space {
  id: ID!
  name: String!
  description: String
  essay_number: Int
  quiz_number: Int
  vocab_number: Int
  created_by: String!
  created_at: DateTime!
  updated_at: DateTime!
  essays: [Essay!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserLanguage {
  id: ID!
  user_id: String!
  language: String!
  proficiency_level: String!
  is_native: Boolean!
  created_at: DateTime!
  updated_at: DateTime!
}

type Follower {
  id: ID!
  id_follower: String!
  id_following: String!
  followed_at: DateTime!
  follower: User
  following: User
}

type User {
  id: ID!
  username: String
  email: String!
  password_hash: String
  role: UserRole!
  auth_provider: AuthProvider!
  auth_provider_id: String
  first_name: String
  last_name: String
  profile_picture: String
  is_email_verified: Boolean!
  last_login: DateTime
  created_at: DateTime!
  updated_at: DateTime!
  languages: [UserLanguage!]
  followedBy: [Follower!]
  following: [Follower!]
  spaces: [Space!]
  essays: [Essay!]
}

"""User roles in the system"""
enum UserRole {
  user
  admin
}

"""Authentication providers"""
enum AuthProvider {
  local
  google
  facebook
}

type Correction {
  id: ID!
  essay_id: String!
  overall_comment: String
  rating: Int
  created_by: String!
  created_at: DateTime!
  updated_at: DateTime!
  essay: Essay
  creator: User
}

"""Association between essays and hashtags"""
type EssayHashtag {
  """Unique identifier for the essay-hashtag association"""
  id: ID!

  """Name of the hashtag"""
  name: String!

  """ID of the associated essay"""
  essay_id: ID!

  """ID of the associated hashtag"""
  hashtag_id: ID!

  """Number of times this hashtag has been used in essays"""
  usage_count: Int!

  """Timestamp when the association was created"""
  created_at: DateTime!

  """Timestamp when the association was last updated"""
  updated_at: DateTime!

  """
  The associated essay details. Only populated when explicitly requested.
  """
  essay: Essay
}

type Essay {
  id: ID!
  id_space: String!
  title: String!
  summary: String
  content: String!
  cover_url: String
  status: EssayStatus!
  language: String!
  created_by: String!
  created_at: DateTime!
  updated_at: DateTime!
  space: Space
  author: User
  hashtags: [EssayHashtag!]
  corrections: [Correction!]
}

"""The status of an essay"""
enum EssayStatus {
  draft
  public
  private
  deleted
}

type PaginationOutputDto {
  totalItems: Int!
  currentPage: Int!
  totalPages: Int!
  itemsPerPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type UsersResponse {
  data: [User!]!
  pagination: PaginationOutputDto!
}

type Query {
  users(findAllUsersDto: FindAllUsersDto!): UsersResponse!
  user(id: String!): User!
}

input FindAllUsersDto {
  page: Int = 1
  perPage: Int = 10
  search: String
}

type Mutation {
  createUser(createUserInput: CreateUserDto!): User!
  updateUser(id: String!, updateUserInput: UpdateUserDto!): User!
  removeUser(id: String!): User!
}

input CreateUserDto {
  last_name: String
  first_name: String
  username: String!
  email: String!
  password: String!
  profile_picture: String
  role: UserRole
  auth_provider: AuthProvider
}

input UpdateUserDto {
  id: UserRole
}