// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/dto/generated"
//   outputToNestJsResourceStructure = "true"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   fileNamingStyle                 = "kebab"
// }

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/generated-dto"
//   outputToNestJsResourceStructure = "true"
//   flatResourceStructure           = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   classValidation                 = "false"
//   fileNamingStyle                 = "kebab"
//   noDependencies                  = "false"
//   outputType                      = "class"
//   prettier                        = "true"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
  teacher
}

enum EssayStatus {
  draft
  public
  private
  deleted
}

enum AuthProvider {
  local
  google
  facebook
}

enum SubscriptionType {
  FREE
  BASIC
  PREMIUM
}

enum PaymentType {
  STRIPE
  MOMO
  ZALOPAY
}

// Reference Data
model ReferenceData {
  id         String   @id @default(uuid())
  type       String // 'language', 'level', 'target', 'topic'
  code       String // ENGLISH, BEGINNER, BUSINESS,...
  name       String
  metadata   Json? // Metadata t√πy theo type
  isActive   Boolean  @default(true) @map("is_active")
  orderIndex Int      @default(0) @map("order_index")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([type, code])
  @@index([type, isActive, orderIndex])
  @@map("reference_data")
}

model User {
  id              String       @id @default(uuid())
  username        String       @unique
  email           String       @unique
  passwordHash    String?      @map("password_hash")
  role            UserRole     @default(user)
  authProvider    AuthProvider @default(local) @map("auth_provider")
  authProviderId  String?      @map("auth_provider_id")
  firstName       String?      @map("first_name")
  lastName        String?      @map("last_name")
  profilePicture  String?      @map("profile_picture")
  isEmailVerified Boolean      @default(false) @map("is_email_verified")
  nativeLanguage  String       @map("native_language")
  lastLogin       DateTime?    @map("last_login")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  deletedAt       DateTime?    @map("deleted_at")

  // Relations
  spaces            Space[]
  courses           Course[]
  courseProgress    CourseProgress[]
  notes             Note[]
  vocabularies      Vocabulary[]
  essays            Essay[]
  corrections       Correction[]
  correctionReplies CorrectionReply[]
  unitComments      UnitComment[]
  subscriptions     Subscription[]
  correctionCredits CorrectionCredit[]

  @@map("users")
}

model Subscription {
  id                String           @id @default(uuid())
  userId            String           @map("user_id")
  type              SubscriptionType
  startDate         DateTime         @map("start_date")
  endDate           DateTime?        @map("end_date")
  status            String // ACTIVE, EXPIRED, CANCELLED
  correctionBalance Int              @default(0) @map("correction_balance")

  // Relations
  user     User                  @relation(fields: [userId], references: [id])
  payments SubscriptionPayment[]

  @@index([userId, status])
  @@map("subscriptions")
}

model SubscriptionPayment {
  id             String      @id @default(uuid())
  subscriptionId String      @map("subscription_id")
  amount         Decimal
  paymentType    PaymentType @map("payment_type")
  paymentDate    DateTime    @map("payment_date")
  status         String // SUCCESS, PENDING, FAILED

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id])

  @@map("subscription_payments")
}

model CorrectionCredit {
  id          String      @id @default(uuid())
  userId      String      @map("user_id")
  amount      Int
  price       Decimal
  paymentId   String?     @map("payment_id")
  paymentType PaymentType @map("payment_type")
  expireDate  DateTime?   @map("expire_date")
  createdAt   DateTime    @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("correction_credits")
}

model Course {
  id           String    @id @default(uuid())
  title        String
  description  String?
  thumbnailUrl String?   @map("thumbnail_url")
  language     String    @map("language")
  minLevel     String    @map("min_level")
  maxLevel     String    @map("max_level")
  topics       String[]  @map("topics")
  courseType   String    @map("course_type")
  price        Decimal?
  totalWeight  Int       @default(0) @map("total_weight")
  isPublished  Boolean   @default(false) @map("is_published")
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  // Relations
  creator  User             @relation(fields: [createdBy], references: [id])
  units    Unit[]
  progress CourseProgress[]
  spaces   SpaceCourse[]

  @@index([isPublished, language, minLevel, maxLevel])
  @@index([deletedAt, isPublished])
  @@index([createdBy])
  @@map("courses")
}

model CourseProgress {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  courseId        String    @map("course_id")
  currentUnitId   String?   @map("current_unit_id")
  completedWeight Int       @default(0) @map("completed_weight")
  lastAccessedAt  DateTime? @map("last_accessed_at")

  // Relations
  user         User           @relation(fields: [userId], references: [id])
  course       Course         @relation(fields: [courseId], references: [id])
  currentUnit  Unit?          @relation(fields: [currentUnitId], references: [id])
  unitProgress UnitProgress[]

  @@unique([userId, courseId])
  @@index([lastAccessedAt])
  @@map("course_progress")
}

model Unit {
  id          String   @id @default(uuid())
  courseId    String   @map("course_id")
  title       String
  description String?
  orderIndex  Int      @map("order_index")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  course         Course           @relation(fields: [courseId], references: [id])
  contents       UnitContent[]
  notes          Note[]
  comments       UnitComment[]
  progress       UnitProgress[]
  courseProgress CourseProgress[] // For currentUnit relation

  @@index([courseId, orderIndex])
  @@index([createdBy])
  @@map("units")
}

model UnitProgress {
  id               String    @id @default(uuid())
  courseProgressId String    @map("course_progress_id")
  unitId           String    @map("unit_id")
  completedWeight  Int       @default(0) @map("completed_weight")
  lastAccessedAt   DateTime? @map("last_accessed_at")
  isCompleted      Boolean   @default(false) @map("is_completed")

  // Relations
  courseProgress  CourseProgress        @relation(fields: [courseProgressId], references: [id])
  unit            Unit                  @relation(fields: [unitId], references: [id])
  contentProgress UnitContentProgress[]

  @@unique([courseProgressId, unitId])
  @@map("unit_progress")
}

model UnitContent {
  id             String   @id @default(uuid())
  unitId         String   @map("unit_id")
  title          String
  contentType    String   @map("content_type")
  content        Json
  orderIndex     Int      @map("order_index")
  isPremium      Boolean  @default(false) @map("is_premium")
  isRequired     Boolean  @default(true) @map("is_required")
  completeWeight Int      @default(1) @map("complete_weight")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  unit     Unit                  @relation(fields: [unitId], references: [id])
  progress UnitContentProgress[]

  @@index([unitId, orderIndex])
  @@index([unitId, isPremium])
  @@map("unit_contents")
}

model UnitContentProgress {
  id             String    @id @default(uuid())
  unitProgressId String    @map("unit_progress_id")
  unitContentId  String    @map("unit_content_id")
  isCompleted    Boolean   @default(false) @map("is_completed")
  completedAt    DateTime? @map("completed_at")

  // Relations
  unitProgress UnitProgress @relation(fields: [unitProgressId], references: [id])
  unitContent  UnitContent  @relation(fields: [unitContentId], references: [id])

  @@unique([unitProgressId, unitContentId])
  @@map("unit_content_progress")
}

model UnitComment {
  id        String   @id @default(uuid())
  unitId    String   @map("unit_id")
  createdBy String   @map("created_by")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  unit    Unit @relation(fields: [unitId], references: [id])
  creator User @relation(fields: [createdBy], references: [id])

  @@index([unitId])
  @@index([createdBy])
  @@map("unit_comments")
}

// Space Management
model Space {
  id           String    @id @default(uuid())
  name         String
  description  String?
  language     String    @map("language")
  target       String    @map("target")
  currentLevel String    @map("current_level")
  topics       String[]  @map("topics")
  targetLevel  String    @map("target_level")
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  // Relations
  creator      User          @relation(fields: [createdBy], references: [id])
  essays       Essay[]
  vocabularies Vocabulary[]
  notes        Note[]
  courses      SpaceCourse[]

  @@index([language, target, currentLevel])
  @@index([createdBy])
  @@index([deletedAt])
  @@map("spaces")
}

model SpaceCourse {
  id       String   @id @default(uuid())
  spaceId  String   @map("space_id")
  courseId String   @map("course_id")
  joinedAt DateTime @default(now()) @map("joined_at")

  // Relations
  space  Space  @relation(fields: [spaceId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([spaceId, courseId])
  @@index([spaceId])
  @@index([courseId])
  @@map("space_courses")
}

model Note {
  id           String    @id @default(uuid())
  spaceId      String?   @map("space_id")
  unitId       String    @map("unit_id")
  title        String
  content      String
  tags         Json      @default("[]")
  isBookmarked Boolean   @default(false) @map("is_bookmarked")
  createdBy    String    @map("created_by")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  // Relations
  unit    Unit   @relation(fields: [unitId], references: [id])
  creator User   @relation(fields: [createdBy], references: [id])
  space   Space? @relation(fields: [spaceId], references: [id])

  @@index([spaceId])
  @@index([unitId])
  @@index([createdBy])
  @@index([isBookmarked])
  @@map("notes")
}

model Vocabulary {
  id              String    @id @default(uuid())
  spaceId         String    @map("space_id")
  term            String
  meaning         String
  exampleSentence String?   @map("example_sentence")
  imageUrl        String?   @map("image_url")
  referenceLink   String?   @map("reference_link")
  referenceName   String?   @map("reference_name")
  tags            Json      @default("[]")
  repetitionLevel Int       @default(0) @map("repetition_level")
  nextReview      DateTime? @map("next_review")
  createdBy       String    @map("created_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  // Relations
  space   Space @relation(fields: [spaceId], references: [id])
  creator User  @relation(fields: [createdBy], references: [id])

  @@index([spaceId])
  @@index([createdBy])
  @@index([term])
  @@index([nextReview])
  @@map("vocabularies")
}

model Essay {
  id          String      @id @default(uuid())
  spaceId     String      @map("space_id")
  title       String
  upvoteCount Int         @default(0) @map("upvote_count")
  summary     String?
  content     String
  coverUrl    String?     @map("cover_url")
  status      EssayStatus
  language    String      @map("language") // reference to language code
  createdBy   String      @map("created_by")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  deletedAt   DateTime?   @map("deleted_at")

  // Relations
  space       Space          @relation(fields: [spaceId], references: [id])
  author      User           @relation(fields: [createdBy], references: [id])
  hashtags    EssayHashtag[]
  corrections Correction[]

  @@index([spaceId])
  @@index([createdBy])
  @@index([status, language])
  @@map("essays")
}

model EssayHashtag {
  id        String   @id @default(uuid())
  essayId   String   @map("essay_id")
  hashtagId String   @map("hashtag_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  essay   Essay   @relation(fields: [essayId], references: [id])
  hashtag Hashtag @relation(fields: [hashtagId], references: [id])

  @@unique([essayId, hashtagId])
  @@map("essay_hashtags")
}

model Hashtag {
  id         String   @id @default(uuid())
  name       String   @unique
  usageCount Int      @default(0) @map("usage_count")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  essays EssayHashtag[]

  @@index([name])
  @@index([usageCount])
  @@map("hashtags")
}

model Correction {
  id             String    @id @default(uuid())
  essayId        String    @map("essay_id")
  overallComment String?   @map("overall_comment")
  rating         Float?
  createdBy      String    @map("created_by")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  // Relations
  essay     Essay                @relation(fields: [essayId], references: [id])
  creator   User                 @relation(fields: [createdBy], references: [id])
  sentences CorrectionSentence[]
  replies   CorrectionReply[]

  @@index([essayId])
  @@index([createdBy])
  @@map("corrections")
}

model CorrectionSentence {
  id            String   @id @default(uuid())
  correctionId  String   @map("correction_id")
  index         Int
  originalText  String   @map("original_text")
  correctedText String?  @map("corrected_text")
  explanation   String?
  isCorrect     Boolean  @default(false) @map("is_correct")
  rating        Float?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  correction Correction @relation(fields: [correctionId], references: [id])

  @@index([correctionId, index])
  @@map("correction_sentences")
}

model CorrectionReply {
  id           String   @id @default(uuid())
  correctionId String   @map("correction_id")
  comment      String
  createdBy    String   @map("created_by")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  correction Correction @relation(fields: [correctionId], references: [id])
  creator    User       @relation(fields: [createdBy], references: [id])

  @@index([correctionId])
  @@index([createdBy])
  @@map("correction_replies")
}
